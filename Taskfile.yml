version: "3"

env:
  PROJECT_NAME: sabiflow
  FRONTEND_DIR: frontend
  BACKEND_DIR: backend
  STATIC_OUT_DIR: frontend/build

dotenv: [".env"]

tasks:
  default:
    desc: Show all available tasks
    cmds:
      - task --list

  tidy:
    desc: Install Go Dependencies
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go mod tidy

  dev:
    desc: Start backend first, wait for it to be ready, then start frontend in foreground with HMR
    silent: true
    cmds:
      - |
        bash -c '
          trap "echo 🔻 Shutting down...; pkill -f \"task dev:backend\"; exit" SIGINT SIGTERM

          # Start backend in background
          gstdbuf -oL task dev:backend | sed $'"'"'s/^/\033[38;5;208m[backend]\033[0m /'"'"' &

          # Wait for backend to be ready
          echo "⏳ Waiting for backend on http://localhost:8080/api/ping..."
          until curl -s http://localhost:8080/api/ping >/dev/null; do sleep 0.5; done
          echo "✅ Backend is up!"

          # Run frontend in foreground to preserve HMR
          exec gstdbuf -oL task dev:frontend | sed $'"'"'s/^/\033[38;5;201m[frontend]\033[0m /'"'"'
        '

  dev:frontend:
    desc: Start SvelteKit dev server
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun run dev

  dev:backend:
    desc: Start Go backend with live reload
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - air

  build:
    desc: Build both frontend and backend
    deps: [build:frontend, build:backend]

  build:frontend:
    desc: Build SvelteKit for production
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - bun run build

  build:backend:
    desc: Build Go backend binary
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go build -o ./tmp/sabiflow ./cmd/api

  lint:
    desc: Run linters for Go and frontend
    cmds:
      - golangci-lint run ./backend/...
      - cd {{.FRONTEND_DIR}} && bun run lint

  test:
    desc: Run Go tests
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - go test ./...

  db:create:
    desc: Create a new Goose SQL migration using task db:create -- migration_name
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations create "{{.CLI_ARGS}}" sql

  db:up:
    desc: Apply all Goose DB migrations
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations up

  #      - GOOSE_DRIVER= GOOSE_DBSTRING="{{.DATABASE_URL}}" goose -dir internal/database/migrations up

  db:up-to:
    desc: Migrate up to a specific version using task db:up-to -- 001_migration
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations up {{.CLI_ARGS}}

  db:down:
    desc: Roll back the last Goose migration
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations down

  db:down-to:
    desc: Roll back to a specific version using task db:down-to -- 001_migration
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations down {{.CLI_ARGS}}

  db:status:
    desc: Show current Goose migration status
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations status

  db:reset:
    desc: Reset database by running all down and up migrations
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - goose -dir internal/database/migrations reset

  db:generate:
    desc: Run sqlc to generate Go code from SQL queries
    dir: "{{.BACKEND_DIR}}/internal/database"
    cmds:
      - sqlc generate

  db:refresh:
    desc: Apply migrations and regenerate Go code using sqlc
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - task: db:up
      - task: db:generate

  docker:up:
    desc: Start QL container
    cmds:
      - docker-compose up -d

  docker:down:
    desc: Stop all Docker containers
    cmds:
      - docker-compose down

  docker:logs:
    desc: View database logs
    cmds:
      - docker-compose logs -f

  docker:psql:
    desc: Open psql shell to the DB container
    cmds:
      - docker exec -it  psql -U user -d sabiflow

  clean:
    desc: Clean backend and frontend build artifacts
    cmds:
      - rm -rf backend/bin/
      - rm -rf {{.STATIC_OUT_DIR}}

  stop:
    desc: Stop dev frontend and backend processes gracefully
    silent: true
    cmds:
      - pkill -f "npm run dev" || true
      - pkill -f "backend/tmp/main" || true
